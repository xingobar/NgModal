var NgModal = (function() {
	var l,
		k,
		c,
		e,
		f,
		d,
		h,
		t = function() {
			b();
			var a = 0,
				d = 0,
				e = 0,
				f = 0;
			c.mousedown(function(b) {
				b = b || window.event;
				b.preventDefault();
				a = b.clientX;
				d = b.clientY;
				c.mouseup(function(a) {
					c.off('mouseup');
					c.off('mousemove');
				});
				c.mousemove(function(b) {
					b = b || window.event;
					b.preventDefault();
					e = a - b.clientX;
					f = d - b.clientY;
					a = b.clientX;
					d = b.clientY;
					b = c.offset().top - f;
					var g = c.offset().left - e;
					c.css({ top: b + 'px', left: g + 'px', position: 'absolute', cursor: 'move' });
				});
			});
		},
		m = function(a) {
			$('html,body').css({ height: '100%' });
			var b = $('body');
			0 == $(e).length &&
				(b.append(
					"<div id='ng_modal_outside'><div id='ng_modal_dialog'  class='ng-modal' role='dialog'><div class='ng-modal-content'><div class='ng-modal-body'><span>\u5f48\u7a97\u6e2c\u8a66</span></div> <div class='ng-modal-footer flex-end'><button type='button' name='yes'>\u78ba\u5b9a</button></div></div></div></div>"
				),
				c || (c = $('#ng_modal_dialog')),
				e || (e = $('#ng_modal_outside')),
				(l = a.hasOwnProperty('animate') ? a.animate : 'ng-rotate'),
				(k = l + '-end'),
				c.addClass(l));
			c.hasClass(k) && c.removeClass(k);
		},
		n = function(a) {
			if (a) {
				a.hasOwnProperty('backdrop') && e.css('background-color', a.backdrop);
				if (a.hasOwnProperty('shadow'))
					if ('boolean' === typeof a.shadow) a.shadow && c.addClass('ng-modal-shadow');
					else throw Error('params shadow is not boolean');
				if (a.hasOwnProperty('header'))
					if ('object' === typeof a.header) {
						if (a.header.hasOwnProperty('show'))
							if ('boolean' === typeof a.header.show)
								a.header.show &&
									($("<div class='ng-modal-header'><span>Header</span></div>").insertBefore(
										'.ng-modal-body'
									),
									f || (f = $('.ng-modal-header')),
									a.header.hasOwnProperty('text') && f.find('span').text(a.header.text),
									a.header.hasOwnProperty('content') &&
										(f.children().remove(), f.append(a.header.content)));
							else throw Error('params header.show is not boolean');
					} else throw Error('params header must be object');
				if (a.hasOwnProperty('body'))
					if ((d || (d = $('.ng-modal-body')), 'object' === typeof a.body)) {
						if (
							(a.body.hasOwnProperty('text') && d.find('span').text(a.body.text),
							a.body.hasOwnProperty('content') && (d.children().remove(), d.append(a.body.content)),
							a.body.hasOwnProperty('height'))
						)
							if ('integer' === typeof a.body.height) d.css({ height: a.body.height + 'px' });
							else throw Error('params body height must be integer');
					} else throw Error('params body must be object');
				if (a.hasOwnProperty('yes'))
					if ('object' === typeof a.yes)
						a.yes.hasOwnProperty('text') && $("button[name='yes']").text(a.yes.text);
					else throw Error('params yes must be object');
				if (a.hasOwnProperty('no'))
					if ('object' === typeof a.no)
						a.no.hasOwnProperty('text') && $("button[name='cancel']").text(a.no.text);
					else throw Error('params no must be object');
				if (a.hasOwnProperty('time'))
					if ('number' === typeof a.time) q(a.time);
					else throw Error('params time is not integer');
				else q(5e3);
				if (a.hasOwnProperty('shadowClose'))
					if ('boolean' === typeof a.shadowClose) a.shadowClose && r();
					else throw Error('params shadowClose is not boolean');
				else r();
				if (a.hasOwnProperty('maxWidth'))
					if ('number' === typeof a.maxWidth) c.css({ 'max-width': a.maxWidth + 'px' });
					else throw Error('params maxWidth is not number');
				if (a.hasOwnProperty('maxHeight'))
					if ('number' === typeof a.maxHeight) c.css({ 'max-height': a.maxHeight + 'px' });
					else throw Error('params maxHeight is not number');
				if (a.hasOwnProperty('draggable'))
					if ('boolean' === typeof a.draggable) a.draggable && t();
					else throw Error('params draggable must be boolean');
				if (a.hasOwnProperty('zIndex'))
					if ('integer' === typeof a.zIndex) e.css({ 'z-index': a.zIndex });
					else throw Error('params zIndex must be integer');
			}
		},
		p = function(a) {
			b();
			var c = h.find('button[name="yes"]'),
				d = h.find('button[name="cancel"]');
			c &&
				c.click(function() {
					if (a.hasOwnProperty('close'))
						if ('function' === typeof a.close) g(a.close);
						else throw Error('params close must be function');
					else g();
				});
			d &&
				d.click(function() {
					if (a.hasOwnProperty('cancel'))
						if ('function' === typeof a.cancel) g(a.cancel);
						else throw Error('params cancel must be function');
					else g();
				});
		},
		q = function(a) {
			setTimeout(function() {
				g();
			}, a ? a : 5e3);
		},
		r = function() {
			b();
			e.click(function() {
				g();
			});
		},
		b = function() {
			e || (e = $('#ng_modal_outside'));
			c || (c = $('#ng_modal_dialog'));
			f || (f = $('.ng-modal-header'));
			d || (d = $('.ng-modal-body'));
			h || (h = $('.ng-modal-footer'));
		},
		g = function(a) {
			a && a();
			b();
			c.addClass(k);
			setTimeout(function() {
				e.remove();
				$('html,body').removeAttr('style');
			}, 1100);
		};
	return {
		alert: function(a) {
			m(a);
			b();
			p(a);
			n(a);
		},
		confirm: function(a) {
			m(a);
			b();
			h.append("<button type='button' name='cancel'>\u53d6\u6d88</button>");
			$('button[name="yes"]').addClass('ng-modal-btn-margin');
			p(a);
			n(a);
		},
		prompt: function(a) {
			m(a);
			b();
			d.children().remove();
			d.append("<textarea id='ng_modal_prompt_textarea' rows='20' cols='60'></textarea>");
			p(a);
			n(a);
		},
		close: g
	};
})();
